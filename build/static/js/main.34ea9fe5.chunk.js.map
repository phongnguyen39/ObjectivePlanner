{"version":3,"sources":["UserForm/Interview.js","UserForm/Exam.js","Infographic/PMInfographic.js","Infographic/SREInforgraphic.js","App.js","serviceWorker.js","index.js"],"names":["interviewForm","react_default","a","createElement","action","method","className","type","Button","variant","color","Component","ExamForm","PMinfographic","Collapsible_default","trigger","SREinforgraphic","App","state","oective","examType","jobTitle","company","formatPreference","switchForm","formPath","change","_this","setState","id","cellSpacing","onClick","this","bind","Interview","Exam","PMInfographic","SREInforgraphic","href","rel","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.34ea9fe5.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nclass interviewForm extends Component {\r\n    render() {\r\n        return (\r\n        \r\n            <form action=\"\" method=\"\">\r\n\r\n                <div className='formInputs'>\r\n                    <label>Job Title</label>\r\n                    <select>\r\n                        <option>Product Manager</option>\r\n                        <option>Software Engineer</option>\r\n                        <option>Front-End Developer</option>\r\n                        <option>Back-End Developer</option>\r\n                    </select><br></br><br></br>\r\n\r\n                    <label>Company</label>\r\n                    <select>\r\n                        <option>Google</option>\r\n                        <option>Facebook</option>\r\n                        <option>Instagram</option>\r\n                    </select><br></br><br></br>\r\n                    \r\n                    <label>Interview Date</label>\r\n                    <input type='date'></input>\r\n\r\n                    {/* <div id='checkboxes'>\r\n                <i className='material-icons md-48'>description</i>\r\n                <i className='material-icons md-48'>mail</i>\r\n                <i className='material-icons md-48'>save</i>\r\n                <i className='material-icons md-48'>calendar_today</i>\r\n            </div> */}\r\n\r\n                    {/* <select>\r\n                <option><i className='material-icons md-48'>description</i></option>\r\n                <option><i className='material-icons md-48'>mail</i></option>\r\n                <option><i className='material-icons md-48'>save</i></option>\r\n                <option><i className='material-icons md-48'>calendar_today</i></option>\r\n            </select> */}\r\n                </div>\r\n\r\n                <Button variant=\"contained\" color=\"primary\">Submit</Button>\r\n            </form>\r\n         \r\n        )\r\n    }\r\n}\r\n\r\nexport default interviewForm;","import React, { Component } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nclass ExamForm extends Component {\r\n    render() {\r\n        return (\r\n            <form action=\"\" method=\"\">\r\n\r\n                <div className='formInputs'>\r\n                    <label>Exam Name</label>\r\n                    <select>\r\n                        <option>GRE</option>\r\n                        <option>AWS Certificaton</option>\r\n                        <option>Cisco Certificaton</option>\r\n                        <option>Back-End Developer</option>\r\n                    </select><br></br><br></br>\r\n                    \r\n                    <label>Exam Date</label>\r\n                    <input type='date'></input>\r\n\r\n                    {/* <div id='checkboxes'>\r\n                <i className='material-icons md-48'>description</i>\r\n                <i className='material-icons md-48'>mail</i>\r\n                <i className='material-icons md-48'>save</i>\r\n                <i className='material-icons md-48'>calendar_today</i>\r\n            </div> */}\r\n\r\n                    {/* <select>\r\n                <option><i className='material-icons md-48'>description</i></option>\r\n                <option><i className='material-icons md-48'>mail</i></option>\r\n                <option><i className='material-icons md-48'>save</i></option>\r\n                <option><i className='material-icons md-48'>calendar_today</i></option>\r\n            </select> */}\r\n                </div>\r\n\r\n                <Button variant=\"contained\" color=\"primary\">Submit</Button>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ExamForm;","import React, { Component } from 'react';\r\nimport './Infographic.css';\r\nimport Collapsible from 'react-collapsible';\r\n\r\n// TODO: Making collapsible sections   https://www.npmjs.com/package/react-collapsible\r\n// https://jsfiddle.net/sm7n31p1/1/\r\n// FIXME: Collapsible fontLarge changes after collapsing... has to do with the object not sharing the same class after triggering.  Check the console log and notice the styling change \r\n\r\nclass PMinfographic extends Component {\r\n\r\n    \r\n    render() {\r\n        \r\n        return (\r\n            <div className=\"infographicStyle\">\r\n\r\n                <h1>Product Manager Interview Prep</h1>\r\n                \r\n                <Collapsible className='fontLarge'  trigger={'> Product Design Questions:'}>\r\n                    <h4>Use CIRCLES Method:</h4>\r\n                    <ul>\r\n                        <li>Comprehend the Situation</li>\r\n                        <li>Ask clarifying Questions</li>\r\n                        <li>Identify many customers' Pain Points</li>\r\n                        <li>Report user Needs - Show Empathy!</li>\r\n                        <li>Cut and Prioritize (ex. using a Matrix)</li>\r\n                        <li>List 3 (Big, Hairy, Creative) Solutions</li>\r\n                        <li>Evaluate Tradeoffs(Pro/Con) pick 1!</li>\r\n                        <li>Summarize and Conclude</li>\r\n                    </ul>\r\n                </Collapsible>\r\n                \r\n                <Collapsible className='fontLarge'  trigger={'> Estimation Questions:'}>\r\n                <h4>The Top Down Method</h4>\r\n                <ul>\r\n                    <li>No. Of US Households</li>\r\n                    <li>% that do X or need Y</li>\r\n                    <li>% of % that will buy Z</li>\r\n                    <li>Adjust and Summarize</li>\r\n                </ul>\r\n\r\n                <h4>Bottom Up Approach</h4>\r\n                <ul>\r\n                    <li>No of customers per local store</li>\r\n                    <li>No of stores per city, then county, then state</li>\r\n                    <li>Then Extrapolate to estimate annual per country</li>\r\n                    <li>Adjust and Summarize</li>\r\n                </ul>\r\n                </Collapsible>\r\n\r\n                \r\n                <Collapsible className='fontLarge'  trigger={'> Analytic Metrics:'}>\r\n                <h4>Use Lewis C. Lin's A.A.R.M. Framework: 1. Acquisition - CPC, CPM, UserSignups 2. Activation - Complete Registrations 3. Retention - DAU, MAU, Churn Rate 4. Monetization - Premium Users, LTV</h4>\r\n                </Collapsible>\r\n\r\n                \r\n                <Collapsible className='fontLarge'  trigger={'> Strategy Questions:'}>\r\n                <ul>\r\n                    <li>SWOT Analysis</li>\r\n                    <li>5[C’s]</li>\r\n                    <li>Porter’s 5 Forces</li>\r\n                </ul>\r\n                </Collapsible>\r\n\r\n                \r\n                <Collapsible className='fontLarge'  trigger={'> Behavorial Questions:'}>\r\n                <ul>\r\n                    <li>STAR (Facebook...)</li>\r\n                    <ul>\r\n                        <li>Situation: Set the Scene.</li>\r\n                        <li>Task: What did you have to do?</li>\r\n                        <li>Action: How did you do it?</li>\r\n                        <li>Result: Dish your result and it’s impact!</li>\r\n                    </ul>\r\n                </ul>\r\n                <h4>or</h4>\r\n\r\n                <ul>\r\n                    <li>DIGS (for Google)</li>\r\n                    <ul>\r\n                        <li>Dramatize Situation: Paint a Picture of what you had to do.</li>\r\n                        <li>Indicate Alternatives: tell what were the available options?</li>\r\n                        <li>Go Through: what and how you did to accomplish the task?</li>\r\n                        <li>Summarize: by concluding how you result made an impact!</li>\r\n                    </ul>\r\n                </ul>\r\n                </Collapsible>\r\n                <p>(Source: The Product Manager Interview by Lewis C Lin)</p>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PMinfographic;","import React, { Component } from 'react';\r\nimport './Infographic.css';\r\nimport Collapsible from 'react-collapsible';\r\n\r\nlet SREinforgraphic = () => {\r\n    return (\r\n        <div className=\"infographicStyle\">\r\n            <h1>Software Developer Interview Prep</h1>\r\n\r\n            \r\n            <Collapsible className='fontLarge' trigger={'> Analytical & Problem Solving I / II / III:'}>\r\n            <ul>\r\n                <li>Did you need much help solving the problem?</li>\r\n\r\n                <li> How optimal was your solution? How long did it take you to arrive at a solution?</li>\r\n\r\n                <li>If you had to design/architect a new solution, did you structure the problem well and think through the tradeoffs of different decisions? </li>\r\n\r\n                <li>I - Data Structures - Stacks, Queues, Linked Lists, Arrays, Trees, HashMaps</li>\r\n                    \r\n        <li>II - Algorithms - Search Algos: BinarySearch, Sort Algos: Insertion Sort, Recursion</li>\r\n                    \r\n        <li>III - Time & Space Complexity: Big - O Notation: O(1) - O(N) - O(log(N)) - O(N2 )</li>\r\n                            </ul>\r\n                            </Collapsible>\r\n\r\n\r\n        \r\n            <Collapsible className='fontLarge' trigger={'> White-boarding &/or Coding Skills:'}>\r\n            \r\n                <li>Understand Problem and what data structure / algorithms to apply</li>\r\n\r\n                <li>Translate as you talk out loud to ask clarifying questions</li>\r\n\r\n                <li> Whiteboard your (base case if necessary ) solution into pseudo code and T-Diagram</li>\r\n\r\n                <li>If it’s a live coding challenge, make sure you wrote runnable code</li>\r\n\r\n                <li>Code cleanliness & Organization is important so follow proper guidelines and good coding styles</li>\r\n\r\n                <li>Think of Edge cases and Potential Errors and adjust solution as necessary</li>\r\n                </Collapsible>\r\n\r\n        \r\n        <Collapsible className='fontLarge'  trigger={'> Past Experience OR Portfolio Projects:'}>\r\n                 \r\n            <li>Experience: Have you made good technical decisions in the past?</li>\r\n                    <li>Have you built interesting, challenging projects?</li>\r\n                    <li> Have you shown drive, initiative, and other important factors? </li>\r\n                    </Collapsible>\r\n            \r\n        \r\n        <Collapsible className='fontLarge'  trigger={'> Communication Skills/ Culture Fit:'}>\r\n                     \r\n            <li>Do your personality and values fit with the company and team?</li>\r\n                        <li>Did you communicate well with your interviewer? </li>\r\n                        </Collapsible>\r\n\r\n            \r\n                            \r\n                            <Collapsible className='fontLarge'  trigger={'> Technical Knowledge/ CS Fundamentals:'}>                        <li>Do you have a strong foundation in computer science and the relevant technologies?</li>\r\n                        <li>If you don’t come from a CS background, familiarize yourself with at least with job specific info. </li>\r\n    <h4>Company/Role specific Preparation</h4>\r\n            \r\n        < li >Read the company’s mission and vision statements to get an idea of their north star.</li>\r\n                        <li>Reverse Engineer job description and requirements to tailor well thought out answers.</li>\r\n                        </Collapsible>\r\n       <p>(Source: Cracking the Coding Interview by Gayle L. McDowell)</p>\r\n                \r\n                    </div>\r\n        )  \r\n    }\r\n             \r\n\r\nexport default SREinforgraphic;","import React, { Component } from 'react';\nimport './App.css';\nimport Button from '@material-ui/core/Button';\nimport InterviewForm from './UserForm/Interview';\nimport ExamForm from './UserForm/Exam';\nimport PMInfographic from './Infographic/PMInfographic';\nimport SREinforgraphic from './Infographic/SREInforgraphic';\n\n// TODO:  Date logic\n\nclass App extends Component {\n  state = {\n    oective: true,\n    examType: '',\n    jobTitle: '',\n    company: '',\n    formatPreference: '',\n    switchForm: false,\n  }\n\n  formPath = (switchForm) => {\n    if(switchForm == \"Interview\"){\n      const change = this.state.switchForm;\n      this.setState({switchForm: !change})\n    }\n    if(switchForm == \"Exam\"){\n      const change = this.state.switchForm;\n      this.setState({switchForm: !change})\n    }    \n  }\n\n  render() {\n    return (\n\n      <div className=\"App\">\n\n        <div id=\"intro\">\n          <h1>Have an exam or interview coming up?</h1>\n          <h4>We are here to help...</h4>\n\n          <table cellSpacing='25'>\n            <thead>\n              <tr>\n                <th></th>\n                <th></th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr>\n                <td><i className='material-icons md-48'>calendar_today</i></td>\n                <td>Gather the right prep materials</td>\n              </tr>\n              <tr>\n                <td><i className='material-icons md-48'>description</i></td>\n                <td>Create a schedule</td>\n              </tr>\n              <tr>\n                <td><i className='material-icons md-48'>toc</i></td>\n                <td>Come up with a game plan</td>\n              </tr>\n            </tbody>\n          </table>\n          <i className='material-icons md-48'>expand_more</i>\n        </div>\n\n        <div id='userForm'>\n          <div id='form-primer'>\n            <h1>Getting Started</h1><br></br><br></br>\n            <p>Tell us what you are preparing for.  We can provide a customized plan for your big day. </p>\n          </div>\n\n          <div>\n            <Button variant=\"contained\" color=\"primary\" onClick={this.formPath.bind(this, \"Interview\")} >Interview</Button>\n\n            <Button variant=\"contained\" color=\"green\" onClick={this.formPath.bind(this, \"Exam\")}>Exam</Button>\n\n            {this.state.switchForm === true ?\n              <div>\n                <InterviewForm />\n              </div> : <div>\n                <ExamForm />\n              </div>\n            }\n          </div>\n        </div>\n        <PMInfographic />\n        <SREinforgraphic />\n\n        <link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\"\n          rel=\"stylesheet\"></link>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}